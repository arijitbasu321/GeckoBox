#!/usr/bin/python

import subprocess, argparse

parser = argparse.ArgumentParser(description='Creates, updates and deletes cloudformation stacks')
parser.add_argument('name', help='name of the stack')
parser.add_argument('action', help='create, update or delete')
parser.add_argument('--template', '-t', help='template to be used for creating the stack', default='TestEnv9.json')
parser.add_argument('--ami', '-a', help='amazon machine image id', default='ami-d6a48bb9')
parser.add_argument('--ip_range', '-r', help='CIDR range for VPC', default='192.168.1.0')
parser.add_argument('--instance_type', '-i', help='EC2 instance type', default='t2.micro')


args = parser.parse_args()


name = args.name
template = "file://" + args.template
ami = "ParameterKey=AMIId,ParameterValue=" + args.ami
ip_range = "ParameterKey=CIDRRange,ParameterValue=" + args.ip_range
instance_type = "ParameterKey=InstanceType,ParameterValue=" + args.instance_type


if args.action == 'create':
    print(args.action + " process initiated")
    subprocess.call(["aws", "cloudformation", "create-stack", "--stack-name", name, "--template-body", template, "--parameters", ami, ip_range, instance_type, "--capabilities", "CAPABILITY_IAM"])

elif args.action == 'update':

    print(args.action + " process initiated")
    subprocess.call(["aws", "cloudformation", "update-stack", "--stack-name", name, "--template-body", template, "--parameters", ami, ip_range, instance_type, "--capabilities", "CAPABILITY_IAM"])

elif args.action == 'delete':

    print(args.action + " process initiated")
    subprocess.call(["aws", "cloudformation", "delete-stack", "--stack-name", name])

else:

    print("Error: invalid argument")
    print("Please run stacker -h for help")
